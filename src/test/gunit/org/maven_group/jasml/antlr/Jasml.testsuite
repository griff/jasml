gunit Jasml;

@header{
    package org.maven_group.jasml.antlr;
}

andOrExpression:
"12 12" -> (CALL 12 12)
"raise Muh" -> (raise (LOOKUP_NONFIX Muh))
"if true then 12 else 25" -> (if true 12 25)
"fn _ => 26" -> (fn (=> _ 26))
"fn 25 => 26 | _ => 12" -> (fn (=> 25 26) (=> _ 12))
"fn 12 => fn 25 => 26 | _ => 12" -> (fn (=> 12 (fn (=> 25 26) (=> _ 12))))
"fn 12 => (fn 25 => 26) | _ => 12" -> (fn (=> 12 (fn (=> 25 26))) (=> _ 12))

appliedExpression:
"12 12" -> (CALL 12 12)
"a b" -> (CALL (LOOKUP_NONFIX a) (LOOKUP_NONFIX b))
"a (12, 12)" -> (CALL (LOOKUP_NONFIX a) (TUPLE 12 12))
"a 12 12 12 12" -> (CALL (CALL (CALL (CALL (LOOKUP_NONFIX a) 12) 12) 12) 12)

atomicExpression:
"op +" -> (LOOKUP +)
"op a" -> (LOOKUP a)
"a" -> (LOOKUP_NONFIX a)
"12" -> "12"
"12.5" -> "12.5"
"true" -> "true"
"false" -> "false"
"#\"a\"" -> "#\"a\""
"\"abc\"" -> "\"abc\""
"[]" -> "LIST_LITERAL"
"[a]" -> (LIST_LITERAL (LOOKUP_NONFIX a))
"[12]" -> (LIST_LITERAL 12)
"[12.5]" -> (LIST_LITERAL 12.5)
"[true]" -> (LIST_LITERAL true)
"[false]" -> (LIST_LITERAL false)
"[#\"a\"]" -> (LIST_LITERAL #"a")
"[\"abc\"]" -> (LIST_LITERAL "\"abc\"")
"(ert)" -> (LOOKUP_NONFIX ert)
"(1, ert)" -> (TUPLE 1 (LOOKUP_NONFIX ert))
"(1; ert, 12)" FAIL
"(1; ert)" -> (EXPRESSIONS 1 (LOOKUP_NONFIX ert))
"let in 12 end" -> (let 12)
"let exception Muh in raise Muh end" -> (let (exception Muh) (raise (LOOKUP_NONFIX Muh)))
"let exception Muh exception Gert in raise Muh end" -> (let (exception Muh) (exception Gert) (raise (LOOKUP_NONFIX Muh)))
"let exception Muh 12 in 12 end" FAIL

match:
"_ => 26" -> (=> _ 26)
"25 => 26 | _ => 12" -> "(=> 25 26) (=> _ 12)"
"12 => fn 25 => 26 | _ => 12" -> (=> 12 (fn (=> 25 26) (=> _ 12)))
"12 => (fn 25 => 26) | _ => 12" -> (=> 12 (fn (=> 25 26))) (=> _ 12)

type:
"int" -> "int"
"int list" -> (list int)
"int list list" -> (list (list int))
"list list" FAIL
"('a -> 'b) -> 'a list -> 'b list" -> (-> (-> (' a) (' b)) (-> (list (' a)) (list (' b))))
"'a -> 'b -> 'a list -> 'b list" -> (-> (' a) (-> (' b) (-> (list (' a)) (list (' b)))))

tuple:
"(ert)" -> (LOOKUP_NONFIX ert)
"(1, ert)" -> (TUPLE 1 (LOOKUP_NONFIX ert))
"(1; ert, 12)" FAIL
"(1; ert)" -> (EXPRESSIONS 1 (LOOKUP_NONFIX ert))

list:
"[]" -> "LIST_LITERAL"
"[1]" -> (LIST_LITERAL 1)
"[a]" -> (LIST_LITERAL (LOOKUP_NONFIX a))
"[1,2]" -> (LIST_LITERAL 1 2)

atomicPattern:
"a" -> "a"
"_" -> "_"
"12" -> "12"
"12.5" -> "12.5"
"true" -> "true"
"false" -> "false"
"#\"a\"" -> "#\"a\""
"\"abc\"" -> "\"abc\""
"[]" -> "LIST_LITERAL"
"[_]" -> (LIST_LITERAL _)
"[a]" -> (LIST_LITERAL a)
"[12]" -> (LIST_LITERAL 12)
"[12.5]" -> (LIST_LITERAL 12.5)
"[true]" -> (LIST_LITERAL true)
"[false]" -> (LIST_LITERAL false)
"[#\"a\"]" -> (LIST_LITERAL #"a")
"[\"abc\"]" -> (LIST_LITERAL "\"abc\"")
"1::2::[]" -> (:: 1 (:: 2 LIST_LITERAL))
"(1::[])::[3]::[]" -> (:: (:: 1 LIST_LITERAL) (:: (LIST_LITERAL 3) LIST_LITERAL))
"_::xs" -> (:: _ xs)
"(1, \"abc\")::(3, \"\")::[]" -> (:: (TUPLE 1 "\"abc\"") (:: (TUPLE 3 "\"\"") LIST_LITERAL))
